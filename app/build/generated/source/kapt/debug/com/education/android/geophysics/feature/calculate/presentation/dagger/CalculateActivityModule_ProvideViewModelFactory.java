// Generated by Dagger (https://google.github.io/dagger).
package com.education.android.geophysics.feature.calculate.presentation.dagger;

import com.education.android.geophysics.feature.calculate.domain.usecases.GetDataUseCase;
import com.education.android.geophysics.feature.calculate.presentation.CalculateActivity;
import com.education.android.geophysics.feature.calculate.presentation.CalculateViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class CalculateActivityModule_ProvideViewModelFactory
    implements Factory<CalculateViewModel> {
  private final CalculateActivityModule module;

  private final Provider<CalculateActivity> contextProvider;

  private final Provider<GetDataUseCase> getDataUseCaseProvider;

  public CalculateActivityModule_ProvideViewModelFactory(
      CalculateActivityModule module,
      Provider<CalculateActivity> contextProvider,
      Provider<GetDataUseCase> getDataUseCaseProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.getDataUseCaseProvider = getDataUseCaseProvider;
  }

  @Override
  public CalculateViewModel get() {
    return provideViewModel(module, contextProvider.get(), getDataUseCaseProvider.get());
  }

  public static CalculateActivityModule_ProvideViewModelFactory create(
      CalculateActivityModule module,
      Provider<CalculateActivity> contextProvider,
      Provider<GetDataUseCase> getDataUseCaseProvider) {
    return new CalculateActivityModule_ProvideViewModelFactory(
        module, contextProvider, getDataUseCaseProvider);
  }

  public static CalculateViewModel provideViewModel(
      CalculateActivityModule instance, CalculateActivity context, GetDataUseCase getDataUseCase) {
    return Preconditions.checkNotNull(
        instance.provideViewModel(context, getDataUseCase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
