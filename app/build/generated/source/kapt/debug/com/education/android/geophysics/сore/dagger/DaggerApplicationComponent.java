// Generated by Dagger (https://google.github.io/dagger).
package com.education.android.geophysics.сore.dagger;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import android.content.Context;
import com.education.android.geophysics.feature.calculate.data.datasource.api.DataApi;
import com.education.android.geophysics.feature.calculate.data.datasource.api.DataApiDataSource;
import com.education.android.geophysics.feature.calculate.data.datasource.api.dagger.DataApiModule;
import com.education.android.geophysics.feature.calculate.data.datasource.api.dagger.DataApiModule_ProvideListApiDataSourceFactory;
import com.education.android.geophysics.feature.calculate.data.datasource.api.dagger.DataApiModule_ProvideListApiFactory;
import com.education.android.geophysics.feature.calculate.data.datasource.db.CacheDataDao;
import com.education.android.geophysics.feature.calculate.data.datasource.db.DataCacheDataSource;
import com.education.android.geophysics.feature.calculate.data.datasource.db.dagger.DataCacheModule;
import com.education.android.geophysics.feature.calculate.data.datasource.db.dagger.DataCacheModule_ProvideCacheDataSourceFactory;
import com.education.android.geophysics.feature.calculate.data.datasource.db.dagger.DataCacheModule_ProvideCachePlacesDaoFactory;
import com.education.android.geophysics.feature.calculate.data.repository.DataRepository;
import com.education.android.geophysics.feature.calculate.data.repository.dagger.DataRepositoryModule;
import com.education.android.geophysics.feature.calculate.data.repository.dagger.DataRepositoryModule_ProvideDataRepositoryFactory;
import com.education.android.geophysics.feature.calculate.domain.usecases.GetDataUseCaseImpl;
import com.education.android.geophysics.feature.calculate.presentation.CalculateActivity;
import com.education.android.geophysics.feature.calculate.presentation.CalculateActivity_MembersInjector;
import com.education.android.geophysics.feature.calculate.presentation.CalculateViewModel;
import com.education.android.geophysics.feature.calculate.presentation.dagger.CalculateActivityModule;
import com.education.android.geophysics.feature.calculate.presentation.dagger.CalculateActivityModule_ProvideViewModelFactory;
import com.education.android.geophysics.сore.App;
import com.education.android.geophysics.сore.dagger.module.RetrofitModule;
import com.education.android.geophysics.сore.dagger.module.RetrofitModule_ProvidesGoogleRetrofitFactory;
import com.education.android.geophysics.сore.dagger.module.RoomModule;
import com.education.android.geophysics.сore.dagger.module.RoomModule_ProvideAppDatabaseFactory;
import com.education.android.geophysics.сore.dagger.module.feature.PlacesListModule_PlacesListActivityInjector;
import com.education.android.geophysics.сore.data.AppDatabase;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private final RetrofitModule retrofitModule;

  private final DataApiModule dataApiModule;

  private final Context context;

  private final RoomModule roomModule;

  private final DataCacheModule dataCacheModule;

  private final DataRepositoryModule dataRepositoryModule;

  private Provider<
          PlacesListModule_PlacesListActivityInjector.CalculateActivitySubcomponent.Factory>
      calculateActivitySubcomponentFactoryProvider;

  private DaggerApplicationComponent(
      RetrofitModule retrofitModuleParam,
      RoomModule roomModuleParam,
      DataRepositoryModule dataRepositoryModuleParam,
      DataApiModule dataApiModuleParam,
      DataCacheModule dataCacheModuleParam,
      App seedInstance,
      Context contextParam) {
    this.retrofitModule = retrofitModuleParam;
    this.dataApiModule = dataApiModuleParam;
    this.context = contextParam;
    this.roomModule = roomModuleParam;
    this.dataCacheModule = dataCacheModuleParam;
    this.dataRepositoryModule = dataRepositoryModuleParam;
    initialize(
        retrofitModuleParam,
        roomModuleParam,
        dataRepositoryModuleParam,
        dataApiModuleParam,
        dataCacheModuleParam,
        seedInstance,
        contextParam);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        CalculateActivity.class, (Provider) calculateActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newInstance(
        getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private DataApi getDataApi() {
    return DataApiModule_ProvideListApiFactory.provideListApi(
        dataApiModule,
        RetrofitModule_ProvidesGoogleRetrofitFactory.providesGoogleRetrofit(retrofitModule));
  }

  private DataApiDataSource getDataApiDataSource() {
    return DataApiModule_ProvideListApiDataSourceFactory.provideListApiDataSource(
        dataApiModule, getDataApi());
  }

  private AppDatabase getAppDatabase() {
    return RoomModule_ProvideAppDatabaseFactory.provideAppDatabase(roomModule, context);
  }

  private CacheDataDao getCacheDataDao() {
    return DataCacheModule_ProvideCachePlacesDaoFactory.provideCachePlacesDao(
        dataCacheModule, getAppDatabase());
  }

  private DataCacheDataSource getDataCacheDataSource() {
    return DataCacheModule_ProvideCacheDataSourceFactory.provideCacheDataSource(
        dataCacheModule, getCacheDataDao());
  }

  private DataRepository getDataRepository() {
    return DataRepositoryModule_ProvideDataRepositoryFactory.provideDataRepository(
        dataRepositoryModule, getDataApiDataSource(), getDataCacheDataSource());
  }

  private GetDataUseCaseImpl getGetDataUseCaseImpl() {
    return new GetDataUseCaseImpl(getDataRepository());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final RetrofitModule retrofitModuleParam,
      final RoomModule roomModuleParam,
      final DataRepositoryModule dataRepositoryModuleParam,
      final DataApiModule dataApiModuleParam,
      final DataCacheModule dataCacheModuleParam,
      final App seedInstance,
      final Context contextParam) {
    this.calculateActivitySubcomponentFactoryProvider =
        new Provider<
            PlacesListModule_PlacesListActivityInjector.CalculateActivitySubcomponent.Factory>() {
          @Override
          public PlacesListModule_PlacesListActivityInjector.CalculateActivitySubcomponent.Factory
              get() {
            return new CalculateActivitySubcomponentFactory();
          }
        };
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder extends ApplicationComponent.Builder {
    private App seedInstance;

    private Context context;

    @Override
    public void seedInstance(App arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, App.class);
      Preconditions.checkBuilderRequirement(context, Context.class);
      return new DaggerApplicationComponent(
          new RetrofitModule(),
          new RoomModule(),
          new DataRepositoryModule(),
          new DataApiModule(),
          new DataCacheModule(),
          seedInstance,
          context);
    }
  }

  private final class CalculateActivitySubcomponentFactory
      implements PlacesListModule_PlacesListActivityInjector.CalculateActivitySubcomponent.Factory {
    @Override
    public PlacesListModule_PlacesListActivityInjector.CalculateActivitySubcomponent create(
        CalculateActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new CalculateActivitySubcomponentImpl(new CalculateActivityModule(), arg0);
    }
  }

  private final class CalculateActivitySubcomponentImpl
      implements PlacesListModule_PlacesListActivityInjector.CalculateActivitySubcomponent {
    private final CalculateActivity arg0;

    private final CalculateActivityModule calculateActivityModule;

    private CalculateActivitySubcomponentImpl(
        CalculateActivityModule calculateActivityModuleParam, CalculateActivity arg0Param) {
      this.arg0 = arg0Param;
      this.calculateActivityModule = calculateActivityModuleParam;
    }

    private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newInstance(
          DaggerApplicationComponent.this.getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private CalculateViewModel getCalculateViewModel() {
      return CalculateActivityModule_ProvideViewModelFactory.provideViewModel(
          calculateActivityModule, arg0, DaggerApplicationComponent.this.getGetDataUseCaseImpl());
    }

    @Override
    public void inject(CalculateActivity arg0) {
      injectCalculateActivity(arg0);
    }

    private CalculateActivity injectCalculateActivity(CalculateActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      CalculateActivity_MembersInjector.injectViewModel(instance, getCalculateViewModel());
      return instance;
    }
  }
}
